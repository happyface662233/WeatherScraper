# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ui.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from datetime import datetime
from PyQt5 import QtCore, QtGui, QtWidgets
import json
from main import weatherGetter
import time 
class Ui_MainWindow(object):
    def __init__(self,weatherGetter):
        self.weather = weatherGetter([])
        self.currentCountries = []
        with open('config.json','r') as f:
            self.config = json.load(f)
            print(self.config)
            try:
                cities = self.config['cities']
                self.weather.locations = cities
            except:
                print('in except')
                self.config['cities'] = []



    def updateConfig(self):
        self.config['lastScraped'] = str(datetime.now())
        self.dump()
        print('saved')

    def dump(self):
        print('dumped')
        with open('config.json','w') as f:
            json.dump(self.config,f)
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        #MainWindow.setStyleSheet("background-color: white;") 
        MainWindow.resize(800, 600)
        MainWindow.setAutoFillBackground(True)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(0, 447, 801, 101))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.setStyleSheet('QWidget {background-color: %s}' % 'blue')
        self.pushButton.clicked.connect(self.onClickStart)
        self.listWidget = QtWidgets.QListWidget(self.centralwidget)
        self.listWidget.setGeometry(QtCore.QRect(0, 50, 256, 401))
        self.listWidget.setObjectName("listWidget")
        if self.weather.locations !=[]:
            for city in self.weather.locations:
                self.listWidget.addItem(city)
        self.listWidget.itemDoubleClicked.connect(self.onDoubleClickDelete)
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(0, 0, 261, 41))
        self.label.setObjectName("label")
        self.line = QtWidgets.QLineEdit(self.centralwidget)
        self.line.setGeometry(QtCore.QRect(480, 80, 261, 22))
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(290, 70, 161, 21))
        self.label_2.setObjectName("label_2")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(480, 100, 261, 28))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.setStyleSheet('QWidget {background-color: %s}' % 'blue')
        self.pushButton_2.clicked.connect(self.addCountryOnCLick)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 25))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 25))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionEdit_save_locations = QtWidgets.QAction(MainWindow)
        self.actionEdit_save_locations.setObjectName("actionEdit_save_locations")
        self.menuFile.addAction(self.actionEdit_save_locations)
        self.menubar.addAction(self.menuFile.menuAction())
        self.actionEdit_save_locations.triggered.connect(self.changeSaveLoc)
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(600, 0, 122, 21))
        self.label_3.setObjectName("label_3")
        self.label_3.setText(self.config["lastScraped"])

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        MainWindow.setStyleSheet(open("style.qss", "r").read())
    def changeSaveLoc(self):
        folderpath = QtWidgets.QFileDialog.getExistingDirectory(None, "Select folder")
        print(folderpath)
        self.weather.writeDir = folderpath
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton.setText(_translate("MainWindow", "Run"))
        self.label.setText(_translate("MainWindow", "Current Locations For Weather Data:"))
        self.label_2.setText(_translate("MainWindow", "Please enter the location"))
        self.pushButton_2.setText(_translate("MainWindow", "Add to locations list"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.actionEdit_save_locations.setText(_translate("MainWindow", "Edit save locations of csv"))
    def onCLickGO(self):
        pass
    def addCountryOnCLick(self):
        print(self.line.text() in self.weather.locations)
        if (self.line.text() in self.weather.locations) == False and self.line.text()!= '':
            print('in if')
            self.weather.locations.append(self.line.text())
            
            print(self.weather.locations)
            #listWidgetItem = QtWidgets.QListWidgetItem(self.line.text(),self.listWidget)
            self.listWidget.addItem(str(self.line.text()))
            self.listWidget.item(0).setHidden(False)
            print('text is ',self.listWidget.item(0).text())
            self.listWidget.repaint()
            self.config['cities'] = self.weather.locations
            self.dump()
        else:
            print('in else')
            print(self.line.text() in self.weather.locations)
        #MainWindow.show()
        #print(dir(self.listWidget))
        self.line.clear()
    def onClickStart(self):

        urls = self.weather.completeURLfromAPI()
        r = self.weather.getCurrentWeather(urls)
        self.weather.writeToCSV(r)
        print('done')
        self.updateConfig()
        self.label_3.setText(self.config['lastScraped'])

    def onDoubleClickDelete(self,item):
        #print(dir(item))
        #print('\n\n\n',dir(self.listWidget))
        item.setBackground(QtGui.QBrush(QtCore.Qt.red))
        
        #print(help(self.listWidget.editItem))
        i = self.listWidget.row(item)
        print(i)
        self.listWidget.takeItem(i)
        self.listWidget.update()
        self.weather.locations.remove(item.text())
        self.config['cities']=self.weather.locations
        self.dump()
        print('removed')
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow(weatherGetter)
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
